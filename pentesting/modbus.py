"""
little cli to pentest ICS and specifically publicly exposed modbus systems
"""
from pymodbus.client import ModbusTcpClient

# Connect to the Modbus TCP device
ip = input("IP> ")
port = 502
slave_id = int(input("Slave ID> "))

client = ModbusTcpClient(ip, port=port)
if not client.connect():
    print("Failed to connect")
    exit()

print(f"Connected to {ip}:{port} (Slave {slave_id})")
print("Commands: read <address> <count>, write <address> <value>, list, exit")

while True:
    cmd = input("modbus> ").strip()
    if cmd.lower() in ["exit", "quit"]:
        break

    parts = cmd.split()
    if len(parts) == 0:
        continue

    action = parts[0].lower()

    try:
        if action == "read" and len(parts) == 3:
            address = int(parts[1])
            count = int(parts[2])
            result = client.read_holding_registers(address=address, count=count, slave=slave_id)
            if not result.isError():
                print("Values:", result.registers)
            else:
                print("Error:", result)

        elif action == "write" and len(parts) == 3:
            address = int(parts[1])
            value = int(parts[2])
            result = client.write_register(address=address, value=value, slave=slave_id)
            if not result.isError():
                print("Write successful")
            else:
                print("Error:", result)

        elif action == "list":
            print("\n--- Scanning Holding Registers (0-19) ---")
            for addr in range(0, 20):
                result = client.read_holding_registers(address=addr, count=1, slave=slave_id)
                if not result.isError():
                    print(f"Address {addr}: {result.registers[0]}")

            print("\n--- Scanning Input Registers (0-19) ---")
            for addr in range(0, 20):
                result = client.read_input_registers(address=addr, count=1, slave=slave_id)
                if not result.isError():
                    print(f"Address {addr}: {result.registers[0]}")
            print("Scan complete.\n")

        else:
            print("Unknown command or wrong arguments")

    except Exception as e:
        print("Exception:", e)

client.close()
print("Disconnected")
